### Startup Command:

bin/dev (Do not use `rails s` directly, as it may cause js/css loading issues)

### The project uses the following tech stack:

Ruby on Rails 7.2
Tailwind v3
Figaro
PostgreSQL
Active_Storage for upload file
Kaminari
Puma
RSpec
RailsUjs( no turo/turbolinks )

Do not add or remove any components and avoid upgrading or downgrading components.

Use simple, clear language and avoid technical jargon.

## What time you should run/stop project

When project has been setup, call `run_project` tool immediately. ALWAYS keep project running.

Restarting project is unnecessary because Rails automatically hot-reloads code changes in most cases. Changes to files within the `config/` directory (except `config/routes.rb`), explicitly require a project restart.


### Some important tips at the project begin

Write new design system at `app/assets/stylesheets/application.css` with beautiful UIs and appropriate animations.

When you need to user-side register/authentication system, don't write it yourself. Use `rails generate authentication` generate the initial code.

Use `rails g home` to generate home page initial code, then write the view by yourself.(notice: new navbar should be written in `app/views/shared/_navbar.html.erb`)

### Some important tips when Developing user authentication/payment/LLM-calling(AI APP) system

when developing order/payment system, don't write it yourself. Use `rails generate stripe_pay` to generate the initial code.

**IMPORTANT for stripe_pay:** Before running `rails generate stripe_pay`, ensure NO Order model exists. The generator will create the Order model, migration, user-side order pages and admin crud pages. If Order model already exists, remove it first to avoid conflicts.

Should only need to support Stripe payments by default.

Do not recreate administrator functionality in User model. Administrator system already exists. Adding admin page low priority.


### Some important tips when coding

Do not generate any fake data that should originally be in the database for users.

Do not write any business logic in the admin backend that should only be for website management and maintenance.

Generate images using this placeholder website: https://images.unsplash.com/ and simultaneously verify accessibility with `curl` if you need static assets.

Use Unsplash images instead of self-generated icons if you need placeholder images with ActiveStorage.

Use `rails generate service xxx` to generate a service file, not generate by yourself.

When installing libraries, try to specify the version you are most familiar with (e.g., npm, bundle) instead of the latest version.

Use `rails generate admin_crud xxx` (where xxx is your model name that you created before) to create the initial CRUD when developing the admin management page, modify generated code for free.

Use `rails generate controller xxx [action1] [action2] [--auth] [--single]` (where xxx is your controller name, action is optional(all actions by default), --auth means need authenticate_user!, --single generates singular resource without index action) to create controllers when developing the user-side functionality, modify generated code for free.

Do not use `to_param` in model, no need friendly url.

Always keep UI responsiveness in mind when coding for user interfaces.

ALWAYS prefer Tailwind CSS v3 syntax for implementing UI styles and simple UI components(tab/dropdown), Alpine.js for JavaScript functionality, and minimize writing native JavaScript as much as possible.

Every form should include error messages using the shared partial. Add `<%= render 'shared/error_messages', model: @your_model %>` at the beginning of every form for consistent error display. Never write nested form.


## Testing Requirements

Keep `rake test` all passed Before delivery feature to users.

`rake test` is configured to only show 3 failed test cases at a time, so you should repeatedly run rake test (no less than 3 rounds, no more than 10 rounds) until all tests pass

Double check `rake test` all passed at last when you finish the task.

Use `curl -X POST localhost:3000/sign_in -H "Content-Type: application/json" -d '{"email":"user@example.com","password":"pass"}'` return session_token then `curl -H "Authorization: Bearer <session_token>" -s xxx` for page test. Use `rails runner "User.create(xxx)"` if need create user first.

Do not use `rails console`, use `rails runner` instead if you want insert or check db data.

Use `bundle exec rspec spec/requests/xxx_spec.rb --format documentation`( not -v or --version ) for single test.

Temporary files should be written in the `tmp` directory.


### Some files never edit

Never edit `application.html.erb`, update `app/views/shared/_navbar.html.erb` instead if need add navbar.

Never edit `admin/base_controller.rb`
