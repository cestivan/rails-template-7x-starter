import BaseChannelController from "./base_channel_controller"
import Rails from "@rails/ujs"

/**
 * üèóÔ∏è <%= file_name.camelize %> Controller - Handles WebSocket + UI for <%= file_name.humanize.downcase %>
 * Extends BaseChannelController for error reporting and WebSocket management
 *
 * ADD YOUR UI HERE:
 * - static targets = ["messageInput", "messagesContainer", "sendButton"]
 * - Add UI methods like sendMessage(), displayMessage()
 * - Override channelReceived() to handle real-time updates
 *
 * DON'T create separate controllers - extend this one!
 * HTML: <div data-controller="<%= file_name.dasherize %>">...</div>
 */
export default class extends BaseChannelController {
  static targets = [
    // üí° EXAMPLE: Common targets for your UI
    // "messageInput",     // <input data-<%= file_name.dasherize %>-target="messageInput">
    // "messagesContainer" // <div data-<%= file_name.dasherize %>-target="messagesContainer">
  ]

  static values = {
    // Add your values here, e.g.:
    // roomId: String,
    // userId: String
  }

  // Declare your targets and values
  // Must-having target
  // declare readonly messageInputTarget: HTMLInputElement
  // Optional target
  // declare readonly hasMessagesContainerTarget: boolean
  // declare readonly messagesContainerTarget: HTMLElement
  // declare readonly roomIdValue: string

  connect(): void {
    console.log("<%= file_name.camelize %> controller connected")

    // Create subscription using base class method
    this.createSubscription("<%= channel_name %>", {
      // Add subscription parameters here, e.g.:
      // room_id: this.roomIdValue
    })
  }

  disconnect(): void {
    console.log("<%= file_name.camelize %> controller disconnected")
    // Destroy subscription using base class method
    this.destroySubscription()
  }

  // Override: Called when channel connects (from base class)
  protected channelConnected(): void {
    // Add your connection logic here
    // Example: Enable send button, show connected status
  }

  // Override: Called when channel disconnects (from base class)
  protected channelDisconnected(): void {
    // Add your disconnection logic here
    // Example: Disable send button, show disconnected status
  }

  // Override: Called when data received (from base class)
  protected channelReceived(data: any): void {
    console.log("Received data:", data)

    // Handle different types of messages
    switch(data.type) {
      // üì® EXAMPLE: Handle incoming message
      // case 'message':
      //   this.handleMessage(data)
      //   break
      // üìä EXAMPLE: Handle status update
      // case 'status_update':
      //   this.handleStatusUpdate(data)
      //   break
      default:
        console.warn("Unknown message type:", data.type)
    }
  }

  // üéÆ ADD YOUR UI METHODS HERE
  // Example: data-action="click-><%= file_name.dasherize %>#sendMessage"
  // sendMessage(data: any = {}): void {
  //   if (!this.connected) return
  //   this.subscription?.perform('send_message', data)
  // }

  // üì§ EXAMPLE: Submit form data via Rails.ajax
  // submitForm(event: Event): void {
  //   event.preventDefault()
  //   const form = event.target as HTMLFormElement
  //
  //   Rails.ajax({
  //     type: form.method || 'POST',
  //     url: form.action,
  //     data: new FormData(form),
  //     success: (data: any) => {
  //       // Update UI after successful submission
  //       console.log('Form submitted successfully:', data)
  //     },
  //     error: (xhr: XMLHttpRequest) => {
  //       // Update UI to show error message
  //       console.error('Form submission failed:', xhr.responseText)
  //     }
  //   })
  // }

  // üìä EXAMPLE: Send action to server via ActionCable
  // updateStatus(data: any = {}): void {
  //   if (!this.connected) return
  //   this.subscription?.perform('update_status', data)
  // }

  // üí° UI HELPER METHODS - Add methods to update your interface
  // private handleMessage(data: any): void {
  //   console.log('Message received:', data)
  //   // TODO: Create message HTML element and add to container
  //   // TODO: Scroll to bottom, update UI state
  // }

  // private handleStatusUpdate(data: any): void {
  //   console.log('Status update received:', data)
  //   // TODO: Update status indicator in UI
  // }
}
