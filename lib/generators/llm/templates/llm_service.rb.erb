# LLM Service - Unified LLM API wrapper
# Default streaming API with blocking fallback
# call(&block) - streaming by default, blocking if no block given
class LlmService < ApplicationService
  class LlmError < StandardError; end
  class TimeoutError < LlmError; end
  class ApiError < LlmError; end

  def initialize(prompt:, system: nil, **options)
    @prompt = prompt
    @system = system
    @options = options
    @model = options[:model] || ENV.fetch('LLM_MODEL')
    @temperature = options[:temperature]&.to_f || 0.7
    @max_tokens = options[:max_tokens] || 4000
    @timeout = options[:timeout] || 30
  end

  # Default call - streaming if block given, blocking otherwise
  def call(&block)
    if block_given?
      call_stream(&block)
    else
      call_blocking
    end
  end

  # Explicit blocking call (returns full response)
  def call_blocking
    return failure("Prompt cannot be blank") if @prompt.blank?

    request = create_request_record

    begin
      request.mark_as_processing!

      response = make_api_request

      content = response.dig("choices", 0, "message", "content")
      usage = response["usage"] || {}

      request.mark_as_completed!(
        content: content,
        prompt_tokens: usage["prompt_tokens"] || 0,
        completion_tokens: usage["completion_tokens"] || 0,
        total_tokens: usage["total_tokens"] || 0
      )

      success(
        content: content,
        request_id: request.id,
        tokens: usage["total_tokens"],
        request: request
      )
    rescue => e
      request.mark_as_failed!(e)
      Rails.logger.error("LLM Error: #{e.class} - #{e.message}")
      failure("LLM request failed: #{e.message}")
    end
  end

  # Explicit streaming call (yields chunks as they arrive)
  def call_stream(&block)
    return failure("Prompt cannot be blank") if @prompt.blank?
    return failure("Block required for streaming") unless block_given?

    request = create_request_record

    begin
      request.mark_as_processing!

      full_content = ""
      prompt_tokens = 0
      completion_tokens = 0

      make_stream_request do |chunk|
        full_content += chunk
        block.call(chunk)
      end

      # Estimate tokens (rough approximation)
      prompt_tokens = (@prompt.length / 4.0).ceil
      completion_tokens = (full_content.length / 4.0).ceil
      total_tokens = prompt_tokens + completion_tokens

      request.mark_as_completed!(
        content: full_content,
        prompt_tokens: prompt_tokens,
        completion_tokens: completion_tokens,
        total_tokens: total_tokens
      )

      success(
        content: full_content,
        request_id: request.id,
        tokens: total_tokens,
        request: request
      )
    rescue => e
      request.mark_as_failed!(e)
      Rails.logger.error("LLM Stream Error: #{e.class} - #{e.message}")
      failure("LLM stream failed: #{e.message}")
    end
  end

  # Class method shortcuts
  class << self
    # Default: streaming if block, blocking otherwise
    def call(prompt:, system: nil, **options, &block)
      new(prompt: prompt, system: system, **options).call(&block)
    end

    # Explicit blocking call
    def call_blocking(prompt:, system: nil, **options)
      new(prompt: prompt, system: system, **options).call_blocking
    end

    # Explicit streaming call
    def call_stream(prompt:, system: nil, **options, &block)
      new(prompt: prompt, system: system, **options).call_stream(&block)
    end
  end

  private

  def create_request_record
    LlmRequest.create!(
      prompt: @prompt,
      model: @model,
      metadata: @options
    )
  end

  def make_api_request
    require 'net/http'
    require 'uri'
    require 'json'

    base_url = ENV.fetch('LLM_BASE_URL')
    uri = URI.parse("#{base_url}/chat/completions")

    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = (uri.scheme == 'https')
    http.read_timeout = @timeout
    http.open_timeout = 10

    request = Net::HTTP::Post.new(uri.path)
    request["Content-Type"] = "application/json"
    request["Authorization"] = "Bearer #{api_key}"
    request.body = build_request_body.to_json

    response = http.request(request)

    case response.code.to_i
    when 200
      JSON.parse(response.body)
    when 429
      raise ApiError, "Rate limit exceeded"
    when 500..599
      raise ApiError, "Server error: #{response.code}"
    else
      raise ApiError, "API error: #{response.code} - #{response.body}"
    end
  rescue Net::ReadTimeout
    raise TimeoutError, "Request timed out after #{@timeout}s"
  rescue JSON::ParserError => e
    raise ApiError, "Invalid JSON response: #{e.message}"
  end

  def make_stream_request(&block)
    require 'net/http'
    require 'uri'
    require 'json'

    base_url = ENV.fetch('LLM_BASE_URL')
    uri = URI.parse("#{base_url}/chat/completions")

    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = (uri.scheme == 'https')
    http.read_timeout = @timeout
    http.open_timeout = 10

    request = Net::HTTP::Post.new(uri.path)
    request["Content-Type"] = "application/json"
    request["Authorization"] = "Bearer #{api_key}"
    request["Accept"] = "text/event-stream"

    body = build_request_body
    body[:stream] = true
    request.body = body.to_json

    http.request(request) do |response|
      unless response.code.to_i == 200
        raise ApiError, "API error: #{response.code} - #{response.body}"
      end

      buffer = ""
      response.read_body do |chunk|
        buffer += chunk

        while (line_end = buffer.index("\n"))
          line = buffer[0...line_end].strip
          buffer = buffer[(line_end + 1)..-1]

          next if line.empty?
          next unless line.start_with?("data: ")

          data = line[6..-1]
          next if data == "[DONE]"

          begin
            json = JSON.parse(data)
            if content = json.dig("choices", 0, "delta", "content")
              block.call(content)
            end
          rescue JSON::ParserError => e
            Rails.logger.warn("Failed to parse SSE chunk: #{e.message}")
          end
        end
      end
    end
  rescue Net::ReadTimeout
    raise TimeoutError, "Request timed out after #{@timeout}s"
  end

  def build_request_body
    messages = []
    messages << { role: "system", content: @system } if @system.present?
    messages << { role: "user", content: @prompt }

    {
      model: @model,
      messages: messages,
      temperature: @temperature,
      max_tokens: @max_tokens
    }
  end

  def api_key
    ENV.fetch('LLM_API_KEY') do
      raise LlmError, "LLM_API_KEY not configured"
    end
  end
end
